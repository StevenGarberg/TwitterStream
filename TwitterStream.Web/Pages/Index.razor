@page "/"
@using AsyncAwaitBestPractices
@using Tweetinvi.Models.V2
@using TwitterStream.Repositories
@inject ITweetRepository TweetRepository

<PageTitle>Twitter Stream</PageTitle>

<h1>Hello, Twitter!</h1>
<h3>
    <strong>Tweet Count:</strong> @TweetCount
</h3>
<h3>
    <strong>Top Hashtags:</strong>
</h3>
<ol>
    @foreach (var hashtag in TopHashtags)
    {
        <li>@hashtag</li>
    }
</ol>
<hr/>
<h2>Tweets</h2>
<EditForm Model="@this">
    <div class="col-12 col-lg-4">
        <label>Number of Tweets:</label><InputNumber class="form-control" @bind-Value="@RefreshCount"/>
    </div>
    <br/>
    <div class="col-12 col-lg-4">
        <label>Refresh Rate (in milliseconds):</label><InputNumber class="form-control col-12 col-lg-4" @bind-Value="@RefreshInterval"/>
    </div>
    <br/>
    <div class="col-12 col-lg-4">
        <label>Language:</label>
        <InputSelect class="form-control col-12 col-lg-4" @bind-Value="@Language">
            <option value="">--NONE--</option>
            <option value="en">English</option>
            <option value="es">Spanish</option>
            <option value="fr">French</option>
            <option value="zh">Chinese</option>
            <option value="ko">Korean</option>
            <option value="ja">Japanese</option>
            <option value="ar">Arabic</option>
        </InputSelect>
    </div>
</EditForm>
<br/>
<div class="row">
    @foreach (var tweet in Tweets)
    {
        <div class="tweet col-12 col-sm-6 col-md-4 col-lg-3 p-1">
            <div class="card">
                <div class="card-header">
                    @($"@{tweet.AuthorId}")
                </div>
                <div class="card-body">
                    @tweet.Text
                </div>
            </div>
        </div>
    }
</div>

@code {
    private TweetV2[] Tweets = Array.Empty<TweetV2>();
    private string[] TopHashtags = Array.Empty<string>();
    private int TweetCount = 0;
    
    private int RefreshInterval = 1000;
    private int RefreshCount = 24;
    private string Language = "en";

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Update().SafeFireAndForget();
    }
    
    private async Task Update()
    {
        while (true)
        {
            try
            {
                TweetCount = TweetRepository.Count();
                TopHashtags = TweetRepository.GetTopHashtags();
                Tweets = TweetRepository.Tweets.Values
                    .Where(x => string.IsNullOrWhiteSpace(x.Lang) || x.Lang.StartsWith(Language))
                    .OrderByDescending(x => x.CreatedAt)
                    .Take(RefreshCount)
                    .ToArray();

                StateHasChanged();
            }
            catch
            {
                // do nothing
            }
            await Task.Delay(RefreshInterval);
        }
    // ReSharper disable once FunctionNeverReturns
    }
}